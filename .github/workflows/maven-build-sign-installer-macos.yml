# This workflow will build a signed, notarized, and stapled JavaFX macOS app with Maven

# For more information on basic setup see:
# https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

# Based on the article https://localazy.com/blog/how-to-automatically-sign-macos-apps-using-github-actions

# Requires the following GitHub Secrets to be set:

# MACOS_CERTIFICATE (base64 Certificates.p12 | pbcopy)
# MACOS_CERTIFICATE_PWD (password for the .p12 file)
# APP_EMAIL (Apple ID Email address used for notarization)
# APP_PASS (App specific password for Apple ID email address, https://support.apple.com/en-us/HT204397)

name: Build Signed macOS Installer

on:
#  push:
#    branches: [ main ]
#  pull_request:
#    branches: [ main ]
  workflow_dispatch:
    branches: [ main ]

env:
  DEV_IDENTITY: PUT_HERE # It's from your dev identity, something like BXPZTQZ35S
  PRIMARY_BUNDLE_ID: com.changenode.BaseApplication # Unique to your app, often the launcher class

jobs:
  build:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: 17.0.1
          distribution: 'temurin'
          cache: 'maven'
      - name: "Build with Maven"
        env:
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
        run: |          
          echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12
          security create-keychain -p temppass build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p temppass build.keychain
          security import certificate.p12 -k build.keychain -P $MACOS_CERTIFICATE_PWD -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k temppass build.keychain
          export IDENTITY=$(security find-identity -v)
          echo $(security find-identity -v)
          mvn -B clean install  -Pmacos-sign --file pom.xml
      - name: "Codesign DMG"
        env:
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
        run: |
          export DMG_PATH=$(ls ./target/*.dmg)
          /usr/bin/codesign --deep --force -s ${{ env.DEV_IDENTITY}} $DMG_PATH -v
          echo DMG_PATH=$DMG_PATH >> $GITHUB_ENV
          echo ${{ env.DMG_PATH }}
      - name: "Notarize DMG"
        uses: devbotsxyz/xcode-notarize@v1
        with:
          product-path: ${{ env.DMG_PATH }}
          primary-bundle-id: ${{ env.PRIMARY_BUNDLE_ID }}
          appstore-connect-username: ${{ secrets.APP_EMAIL }}
          appstore-connect-password: ${{ secrets.APP_PASS }}
      - name: "Staple DMG"
        uses: devbotsxyz/xcode-staple@v1
        with:
          product-path: ${{ env.DMG_PATH }}
      - name: Update Automatic Release
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN}}"
          automatic_release_tag: "macOS-signed-latest"
          prerelease: true
          title: "macOS Signed Build"
          files: ${{ env.DMG_PATH }}
